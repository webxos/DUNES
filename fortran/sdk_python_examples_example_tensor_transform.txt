{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# QFN Tensor Transformation Tutorial\n",
    "\n",
    "This notebook demonstrates how to use the **Quantum Fortran Network (QFN)** SDK to perform a quadrilinear tensor transformation. The QFN system leverages four Fortran servers for distributed computing, orchestrated by a Python SDK.\n",
    "\n",
    "## Prerequisites\n",
    "- Install the QFN system (see `README.md`).\n",
    "- Ensure PostgreSQL is running with database `qfn_state`.\n",
    "- Install Python dependencies: `pip install -r sdk/python/requirements.txt`.\n",
    "- Start the Fortran servers: `fpm run --target qfn_server_1` (and servers 2–4).\n",
    "\n",
    "**Embedded Guidance**: Save this notebook in `sdk/python/examples/`. Run it using Jupyter: `jupyter notebook example_tensor_transform.ipynb`. Ensure all servers are running before executing the cells."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qfn_sdk import QuantumFortranNetwork\n",
    "import torch\n",
    "\n",
    "# Initialize the QFN SDK\n",
    "qfn = QuantumFortranNetwork(\n",
    "    server_hosts=[\"localhost:50051\", \"localhost:50052\", \"localhost:50053\", \"localhost:50054\"],\n",
    "    database_url=\"postgresql://user:pass@localhost:5432/qfn_state\"\n",
    ")\n",
    "\n",
    "# Define a 4D input tensor\n",
    "input_tensor = [[[[1.0, 2.0], [3.0, 4.0]], [[5.0, 6.0], [7.0, 8.0]]]]\n",
    "\n",
    "# Perform quadrilinear transformation\n",
    "result = qfn.quadratic_transform(input_tensor)\n",
    "\n",
    "print(f\"Transformed tensor: {result}\")\n",
    "\n",
    "# Visualize the result using PyTorch\n",
    "tensor = torch.tensor(result)\n",
    "print(f\"Tensor shape: {tensor.shape}\")\n",
    "print(f\"Tensor mean: {tensor.mean().item()}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explanation\n",
    "\n",
    "1. **Initialization**: The `QuantumFortranNetwork` class connects to the four Fortran servers and the PostgreSQL database.\n",
    "2. **Tensor Transformation**: The `quadratic_transform` method sends the input tensor to all servers, performs quadrilinear operations, and aggregates the results.\n",
    "3. **Visualization**: We use PyTorch to inspect the resulting tensor’s shape and statistics.\n",
    "\n",
    "**Next Steps**:\n",
    "- Try different input tensors (e.g., larger dimensions).\n",
    "- Explore the `encrypt` method for secure data processing.\n",
    "- Check the database (`qfn_state`) for logged tensor data."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}